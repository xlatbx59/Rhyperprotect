//Author: xlatbx59
//Github profile: https://github.com/xlatbx59
#include <iostream>
#include <fstream>
#include <queue>
#include <string.h>
#include "code_analysis/code_analysis.hpp"
#include "obfuscation/obfuscation.hpp"

#define ZeroMemory(dst, size) memset(dst, 0, size)

using std::ofstream;

void bubble_sort_vector(vector<BasicBlock>& bbs)
{
  bool flag = false;
  do
  {
    flag = false;
    for(int i = 0; i < bbs.size() - 1; i++)
    {
      if(bbs[i].bb_addr > bbs[i + 1].bb_addr)
      {
        std::swap(bbs[i], bbs[i + 1]);
        flag = true;
      }
    }
  }while (flag);
}

int main(void)
{
  vector<ZyanU64> disassembled;
	const uint8_t code[] = {
    0x55, 0x48, 0x89, 0xe5, 0x48, 0x81, 0xec, 0x40, 0x01, 0x00, 0x00, 0x48, 0x89, 0xbd, 0xd8,
    0xfe, 0xff, 0xff, 0x89, 0xb5, 0xd4, 0xfe, 0xff, 0xff, 0x48, 0x89, 0x95, 0xc8, 0xfe, 0xff,
    0xff, 0x89, 0x8d, 0xd0, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0x85, 0xc0, 0xfe, 0xff, 0xff, 0x64,
    0x48, 0x8b, 0x04, 0x25, 0x28, 0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0xf8, 0x31, 0xc0, 0xc7,
    0x85, 0xe4, 0xfe, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x85, 0xe8, 0xfe, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xbd, 0xd8, 0xfe, 0xff, 0xff, 0x00, 0x74, 0x32, 0x48,
    0x83, 0xbd, 0xc8, 0xfe, 0xff, 0xff, 0x00, 0x74, 0x28, 0x83, 0xbd, 0xd0, 0xfe, 0xff, 0xff,
    0x00, 0x74, 0x1f, 0x83, 0xbd, 0xd4, 0xfe, 0xff, 0xff, 0x00, 0x74, 0x16, 0x48, 0x83, 0xbd,
    0xc0, 0xfe, 0xff, 0xff, 0x00, 0x74, 0x0c, 0x81, 0xbd, 0xd0, 0xfe, 0xff, 0xff, 0x00, 0x01,
    0x00, 0x00, 0x76, 0x0a, 0xb8, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x02, 0x00, 0x00, 0xc7,
    0x85, 0xe8, 0xfe, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1e, 0x8b, 0x85, 0xe8, 0xfe,
    0xff, 0xff, 0x89, 0xc2, 0x8b, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0x48, 0x98, 0x88, 0x94, 0x05,
    0xf0, 0xfe, 0xff, 0xff, 0x83, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0x01, 0x81, 0xbd, 0xe8, 0xfe,
    0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x7e, 0xd6, 0xc7, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0x00,
    0x00, 0x00, 0x00, 0xe9, 0x8f, 0x00, 0x00, 0x00, 0x8b, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0x48,
    0x98, 0x0f, 0xb6, 0x84, 0x05, 0xf0, 0xfe, 0xff, 0xff, 0x0f, 0xb6, 0xd0, 0x8b, 0x85, 0xe4,
    0xfe, 0xff, 0xff, 0x8d, 0x0c, 0x02, 0x8b, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0xba, 0x00, 0x00,
    0x00, 0x00, 0xf7, 0xb5, 0xd0, 0xfe, 0xff, 0xff, 0x89, 0xd0, 0x89, 0xc2, 0x48, 0x8b, 0x85,
    0xc8, 0xfe, 0xff, 0xff, 0x48, 0x01, 0xd0, 0x0f, 0xb6, 0x00, 0x0f, 0xb6, 0xc0, 0x8d, 0x14,
    0x01, 0x89, 0xd0, 0xc1, 0xf8, 0x1f, 0xc1, 0xe8, 0x18, 0x01, 0xc2, 0x0f, 0xb6, 0xd2, 0x29,
    0xc2, 0x89, 0x95, 0xe4, 0xfe, 0xff, 0xff, 0x48, 0x8d, 0x95, 0xf0, 0xfe, 0xff, 0xff, 0x8b,
    0x85, 0xe4, 0xfe, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc2, 0x48, 0x8d, 0x8d, 0xf0, 0xfe,
    0xff, 0xff, 0x8b, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x48, 0x89,
    0xd6, 0x48, 0x89, 0xc7, 0xe8, 0xb9, 0x01, 0x00, 0x00, 0x83, 0x85, 0xe8, 0xfe, 0xff, 0xff,
    0x01, 0x81, 0xbd, 0xe8, 0xfe, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x0f, 0x8e, 0x61, 0xff,
    0xff, 0xff, 0xc7, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x85, 0xe4,
    0xfe, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x85, 0xec, 0xfe, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x00, 0xe9, 0xe2, 0x00, 0x00, 0x00, 0x8b, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0x8d, 0x50,
    0x01, 0x89, 0xd0, 0xc1, 0xf8, 0x1f, 0xc1, 0xe8, 0x18, 0x01, 0xc2, 0x0f, 0xb6, 0xd2, 0x29,
    0xc2, 0x89, 0x95, 0xe8, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0x48, 0x98,
    0x0f, 0xb6, 0x84, 0x05, 0xf0, 0xfe, 0xff, 0xff, 0x0f, 0xb6, 0xd0, 0x8b, 0x85, 0xe4, 0xfe,
    0xff, 0xff, 0x01, 0xc2, 0x89, 0xd0, 0xc1, 0xf8, 0x1f, 0xc1, 0xe8, 0x18, 0x01, 0xc2, 0x0f,
    0xb6, 0xd2, 0x29, 0xc2, 0x89, 0x95, 0xe4, 0xfe, 0xff, 0xff, 0x48, 0x8d, 0x95, 0xf0, 0xfe,
    0xff, 0xff, 0x8b, 0x85, 0xe4, 0xfe, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01, 0xc2, 0x48, 0x8d,
    0x8d, 0xf0, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0x48, 0x98, 0x48, 0x01,
    0xc8, 0x48, 0x89, 0xd6, 0x48, 0x89, 0xc7, 0xe8, 0x02, 0x01, 0x00, 0x00, 0x8b, 0x85, 0xec,
    0xfe, 0xff, 0xff, 0x48, 0x63, 0xd0, 0x48, 0x8b, 0x85, 0xd8, 0xfe, 0xff, 0xff, 0x48, 0x01,
    0xd0, 0x0f, 0xb6, 0x30, 0x8b, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0x48, 0x98, 0x0f, 0xb6, 0x94,
    0x05, 0xf0, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0xe4, 0xfe, 0xff, 0xff, 0x48, 0x98, 0x0f, 0xb6,
    0x84, 0x05, 0xf0, 0xfe, 0xff, 0xff, 0x01, 0xd0, 0x0f, 0xb6, 0xc0, 0x48, 0x98, 0x0f, 0xb6,
    0x8c, 0x05, 0xf0, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0xec, 0xfe, 0xff, 0xff, 0x48, 0x63, 0xd0,
    0x48, 0x8b, 0x85, 0xc0, 0xfe, 0xff, 0xff, 0x48, 0x01, 0xd0, 0x31, 0xce, 0x89, 0xf2, 0x88,
    0x10, 0x83, 0x85, 0xec, 0xfe, 0xff, 0xff, 0x01, 0x8b, 0x85, 0xec, 0xfe, 0xff, 0xff, 0x3b,
    0x85, 0xd4, 0xfe, 0xff, 0xff, 0x0f, 0x82, 0x0c, 0xff, 0xff, 0xff, 0xb8, 0x01, 0x00, 0x00,
    0x00, 0x48, 0x8b, 0x55, 0xf8, 0x64, 0x48, 0x2b, 0x14, 0x25, 0x28, 0x00, 0x00, 0x00, 0x74,
    0x05, 0x66, 0x48, 0x90, 0x90, 0x90, 0xc9, 0xc3, 0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 0xec,
    0x20, 0x64, 0x48, 0x8b, 0x04, 0x25, 0x28, 0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0xf8, 0x31,
    0xc0, 0xc7, 0x45, 0xee, 0x70, 0x65, 0x64, 0x69, 0xc6, 0x45, 0xf2, 0x61, 0xc7, 0x45, 0xf3,
    0x00, 0x00, 0x00, 0x00, 0xc6, 0x45, 0xf7, 0x00, 0xc7, 0x45, 0xea, 0x57, 0x69, 0x6b, 0x69,
    0x48, 0x8d, 0x4d, 0xf3, 0x48, 0x8d, 0x55, 0xea, 0x48, 0x8d, 0x45, 0xee, 0x49, 0x89, 0xc8,
    0xb9, 0x04, 0x00, 0x00, 0x00, 0xbe, 0x05, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xe8, 0x00,
    0xfd, 0xff, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x55, 0xf8, 0x64, 0x48, 0x2b,
    0x14, 0x25, 0x28, 0x00, 0x00, 0x00, 0x74, 0x05, 0x66, 0x48, 0x90, 0x90, 0x90, 0xc9, 0xc3,
    0x55, 0x48, 0x89, 0xe5, 0x48, 0x89, 0x7d, 0xe8, 0x48, 0x89, 0x75, 0xe0, 0x48, 0x8b, 0x45,
    0xe8, 0x0f, 0xb6, 0x00, 0x88, 0x45, 0xff, 0x48, 0x8b, 0x45, 0xe0, 0x0f, 0xb6, 0x10, 0x48,
    0x8b, 0x45, 0xe8, 0x88, 0x10, 0x48, 0x8b, 0x45, 0xe0, 0x0f, 0xb6, 0x55, 0xff, 0x88, 0x10,
    0x90, 0x5d, 0xc3
  };

	ZydisDecoder decoder;
  Assembler x86_asm(0, ZYDIS_MACHINE_MODE_LONG_64);
	vector<BasicBlock>program;
	uint8_t* machine_code = nullptr;
	uint64_t size = 0, temp = 0;

	disassemble(decoder, program, disassembled, code, sizeof(code), 0, false, 0x00101139);
  bubble_sort_vector(program);

  for(BasicBlock bb: program)
    for(Instruction inst : bb.insts)
      x86_asm.register_inst(&inst);
    
  machine_code = x86_asm.assemble(size);
  

  ofstream myfile;
  myfile.open ("new_assembler.bin");
  myfile.write((const char*)machine_code, size);
  myfile.close();

  return 0;
}
